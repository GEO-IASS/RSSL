% Generated by roxygen2 (4.1.1): do not edit by hand
% Please edit documentation in R/LaplacianKernelLeastSquaresClassifier.R
\name{LaplacianKernelLeastSquaresClassifier}
\alias{LaplacianKernelLeastSquaresClassifier}
\title{Laplacian Regularized Least Squares Classifier}
\usage{
LaplacianKernelLeastSquaresClassifier(X, y, X_u, lambda = 0, gamma = 0,
  kernel = vanilladot(), adjacency_kernel = rbfdot(1/4), x_center = TRUE,
  scale = TRUE, y_scale = TRUE)
}
\arguments{
\item{X}{matrix; Design matrix for labeled data}

\item{y}{factor or integer vector; Label vector}

\item{X_u}{matrix; Design matrix for unlabeled data}

\item{lambda}{numeric; L2 regularization parameter}

\item{gamma}{numeric; Weight of the unlabeled data}

\item{kernel}{kernlab::kernel to use}

\item{adjacency_kernel}{kernlab::kernel to use as adjacency kernel}

\item{x_center}{logical;  Should the features be centered?}

\item{scale}{boolean; Should the features be normalized? (default: FALSE)}

\item{y_scale}{logical; whether the target vector should be centered}
}
\description{
Laplacian Regularized Least Squares Classifier
}
\examples{
library(RSSL)
library(ggplot2)

testdata <- generateTwoCircles(1000,noise=0.05)
testdata[-sample(1:nrow(testdata),6),]$Class <- NA
tvec<-na.omit(testdata$Class)
dmatU <- as.matrix(testdata[is.na(testdata$Class),1:2])
dmat <- as.matrix(testdata[!is.na(testdata$Class),1:2])

precision<-100
xgrid<-seq(min(dmatU[,1]),max(dmatU[,1]),length.out=precision)
ygrid<-seq(min(dmatU[,2]),max(dmatU[,2]),length.out=precision)
gridmat <- expand.grid(xgrid,ygrid)

g_sup <- KernelLeastSquaresClassifier(dmat, tvec, kernel=rbfdot(1), lambda=0.001, scale = TRUE)
g_kernel<- LaplacianKernelLeastSquaresClassifier(X=dmat, y=tvec, X_u=dmatU, kernel=rbfdot(1), lambda=0.001, gamma=500, adjacency_kernel = rbfdot(1), scale = TRUE)

plotframe <- cbind(gridmat, decisionvalues(g_sup,gridmat))
colnames(plotframe)<- c("x","y","Output")
ggplot(plotframe, aes(x=x,y=y)) +
  geom_tile(aes(fill = Output)) +
  stat_contour(aes(z=Output),breaks=c(0.5),size=1) +
  scale_fill_gradient(low="yellow", high="red",limits=c(0,1)) +
  geom_point(aes(x=X.1,y=X.2,shape=Class,size=Class),data=testdata) +
  scale_shape_discrete(na.value=8) +
  scale_size_discrete(range=c(5,5),na.value=0.5)

plotframe <- cbind(gridmat, decisionvalues(g_kernel,gridmat))
colnames(plotframe)<- c("x","y","Output")
ggplot(plotframe, aes(x=x,y=y)) +
  geom_tile(aes(fill = Output)) +
  stat_contour(aes(z=Output),breaks=c(0.5),size=1) +
  scale_fill_gradient(low="yellow", high="red",limits=c(0,1)) +
  geom_point(aes(x=X.1,y=X.2,shape=Class,size=Class),data=testdata) +
  scale_shape_discrete(na.value=8) +
  scale_size_discrete(range=c(5,5),na.value=0.5)

testdata <- generateCrescentMoon(1000,sigma=0.3)
testdata[-sample(1:nrow(testdata),10),]$Class <- NA
tvec<-na.omit(testdata$Class)
dmatU <- as.matrix(testdata[is.na(testdata$Class),2:3])
dmat <- as.matrix(testdata[!is.na(testdata$Class),2:3])

precision<-100
xgrid<-seq(min(dmatU[,1]),max(dmatU[,1]),length.out=precision)
ygrid<-seq(min(dmatU[,2]),max(dmatU[,2]),length.out=precision)
gridmat <- expand.grid(xgrid,ygrid)

g_sup <- KernelLeastSquaresClassifier(dmat, tvec, kernel=rbfdot(0.25), lambda=0.001, scale = TRUE)
g_kernel <- LaplacianKernelLeastSquaresClassifier(X=dmat, y=tvec, X_u=dmatU, kernel=rbfdot(0.25), lambda=0.001, gamma=500, adjacency_kernel = rbfdot(10), scale = TRUE)
g_kernel <- KernelICLeastSquaresClassifier(X=dmat, y=tvec, X_u=dmatU, kernel=rbfdot(0.25), lambda=0.001, scale = TRUE, classprior=0.5,lambda_prior=100, projection = "supervised")

plotframe <- cbind(gridmat, decisionvalues(g_sup,gridmat))
colnames(plotframe)<- c("x","y","Output")
p_sup <- ggplot(plotframe, aes(x=x,y=y)) +
  geom_tile(aes(fill = Output)) +
  stat_contour(aes(z=Output),breaks=c(0.5),size=1) +
  scale_fill_gradient(low="yellow", high="red",limits=c(0,1)) +
  geom_point(aes(x=X1,y=X2,shape=Class,size=Class),data=testdata) +
  scale_shape_discrete(na.value=8) +
  scale_size_discrete(range=c(5,5),na.value=0.5)

plotframe <- cbind(gridmat, decisionvalues(g_kernel,gridmat))
colnames(plotframe)<- c("x","y","Output")
p_kern <- ggplot(plotframe, aes(x=x,y=y)) +
  geom_tile(aes(fill = Output)) +
  stat_contour(aes(z=Output),breaks=c(0.5),size=1) +
  scale_fill_gradient(low="yellow", high="red",limits=c(0,1)) +
  geom_point(aes(x=X1,y=X2,shape=Class,size=Class),data=testdata) +
  scale_shape_discrete(na.value=8) +
  scale_size_discrete(range=c(5,5),na.value=0.5)

p_unlabels <- ggplot(data.frame(dmatU,y=g_kernel@unlabels+g_kernel@y_scale),aes(x=X1,y=X2,color=y)) +geom_point()

library("gridExtra")
grid.arrange(p_sup,p_kern,p_unlabels,ncol=2)
}

